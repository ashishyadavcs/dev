import Cookies from "cookies";
const followRequest = async (req, res, token) => {
    const { slug: slug } = req.query;
    delete req.query.slug;
    const option = {
        method: req.method,
        headers: {
            "Content-Type": req.headers["Content-Type"] || "application/json",
            Authorization: `Bearer ${token}`,
        },
    };
    "GET" !== req.method &&
        (option.body = "object" == typeof req.body ? JSON.stringify(req.body) : req.body);
    const result = await fetch(
        `${process.env.BASE_URL}/${slug.join("/")}?${new URLSearchParams(req.query)}`,
        option
    )
        .then(res => res.json())
        .catch(err => ({ success: !1, message: err.message }));
    res.json(result);
};
export default async function handler(req, res) {
    const cookies = new Cookies(req, res);
    let token = cookies.get("x-token") || req.cookies.get("x-token");
    const refresh = cookies.get("x-refresh") || req.cookies.get("x-refresh");
    if ((console.log({ token: token, refresh: refresh }), !token && refresh)) {
        const result = await fetch(`${process.env.BASE_URL}/refresh`, {
            method: "POST",
            body: JSON.stringify({ refreshToken: refresh }),
            headers: { "Content-Type": "application/json", cookie: req.headers.cookie },
        }).then(resp => resp.json());
        if (result.success) {
            const cookies = new Cookies(req, res, { keys: ["keras-token"] });
            result.data.tokens &&
                ((token = result.data.tokens.access.token),
                cookies.set("x-token", result.data.tokens.access.token, {
                    overwrite: !0,
                    signed: !0,
                    expires: new Date(result.data.tokens.access.expiresAt),
                    ...(process.env.COOKIE_DOMAIN && { domain: `${process.env.COOKIE_DOMAIN}` }),
                }),
                cookies.set("x-refresh", result.data.tokens.refresh.token, {
                    overwrite: !0,
                    signed: !0,
                    expires: new Date(result.data.tokens.refresh.expiresAt),
                    ...(process.env.COOKIE_DOMAIN && { domain: `${process.env.COOKIE_DOMAIN}` }),
                })),
                followRequest(req, res, token);
        } else res.status(401).json(result);
    } else followRequest(req, res, token);
}
